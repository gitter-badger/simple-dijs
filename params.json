{
  "name": "Simple-dijs",
  "tagline": "Simple Javascript DI",
  "body": "# simple-dijs\r\n\r\nTDD devlopment with Pimple as sample. [![Build Status](https://travis-ci.org/avighier/simple-dijs.svg?branch=master)](https://travis-ci.org/avighier/simple-dijs)\r\n\r\nRead the tests for documentation. You can also read the next presentation.\r\n\r\n```javascript\r\n    var Di = require('simple-dijs');\r\n    var di = new Di();\r\n    \r\n    di.set('database', function () {\r\n        return new Database();\r\n    });\r\n\r\n    di.set('userCollection', function (di) {\r\n        return new UserCollection(di.get('database'));\r\n    });\r\n    \r\n    // So, ...\r\n    di.get('userCollection').find(1); // UserCollection instanciated now !\r\n    di.get('userCollection').find(1); // The same UserCollection instance\r\n\r\n    // Also during construction and method batchSet\r\n    new Di({\r\n        'database': function () { ... },\r\n        'userCollection': function (di) { ... }\r\n    });\r\n\r\n    di.batchSet({ ..same than construct.. });\r\n    \r\n    // If you want to factory instead of return the same object :\r\n    di.set('userCollection', di.factory(function (di) {\r\n        return new UserCollection(di.get('database'));\r\n    }));\r\n    \r\n    // So, ...\r\n    di.get('userCollection').find(1); // UserCollection instanciated now !\r\n    di.get('userCollection').find(1); // Other UserCollection instance now, instanciated now !\r\n    \r\n    // You can also use di.register() alias of di.set()\r\n    \r\n    // You can store raw values\r\n    di.set('port', 80);\r\n    di.get('port'); // 80\r\n    \r\n    // But actually, you have to protect yourself raw functions (this will be protect() method) :\r\n    di.set('math.add', function (a, b) {\r\n        return a + b;\r\n    });\r\n\r\n    // This previous example is BAD, use instead :\r\n    di.set('math.add', function () {\r\n        return function (a, b) {\r\n            return a + b;\r\n        };\r\n    });\r\n    \r\n    // If you need it, i can implement di.protect() to allow to store functions\r\n    \r\n    // You can use promise\r\n    \r\n    di.set('async', function () {\r\n        return when.promise(/*Blabla*/);\r\n    });\r\n    \r\n    di.get('async').done(function () {\r\n        // ...\r\n    });\r\n```\r\n\r\nDevlopment :\r\n- npm test must return OK\r\n- your code must be well tested\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}